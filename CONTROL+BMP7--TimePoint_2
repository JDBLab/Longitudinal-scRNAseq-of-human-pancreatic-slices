# R version 4.1.3(x64 bit) and RStudio 2022.07.1+554 "Spotted Wakerobin" Release (7872775ebddc40635780ca1ed238934c3345c5de, 2022-07-22) for Windows
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.12.8 Chrome/69.0.3497.128 Safari/537.36  were used for running this code :)

# Seurat is a multimodal single Cell RNA seq analysis algorithm created by
# The Satija Lab. For more information please see: https://satijalab.org/seurat/
# LOAD LIBRARIES ####
# Restart Rstudio or R

install.packages("devtools")
install.packages("usethis")
library(usethis)
library(devtools)
install.packages("pkgbuild")
library(pkgbuild)
install.packages("Matrix")
install.packages("ggridges")
install.packages("cowplot")
install.packages('ggrepel')
install.packages("R.utils")
install.packages("gridExtra")
install.packages("Seurat")
install.packages("plotly")
install.packages("clustree")
install.packages('multtest')
install.packages("ggplot2")
install.packages("ggraph")
install.packages('Seurat')
if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("monocle")

# Install multtest for Seurat
BiocManager::install("multtest")
library(ggplot2)
library(cowplot)
library(Matrix)
library(ggridges)
library(ggrepel)
library(dplyr)
library(Seurat)
library(plotly)
library(clustree)
library(Seurat)
library(ggraph)
library(Matrix)
library(VGAM)
library(stats4)
library(splines)
library(DDRTree)
library(irlba)
library(BiocGenerics)
library(Biobase)

# Run the following code once you have Seurat installed
# Set global environment parameter
options(future.globals.maxSize= 89128960)
memory.limit()
memory.limit(size=21474836480) 

# Setup  BMP7-ST3(TimePoint 2) Seuratobject
#  Load 10X data ####
BMP1st3.data <-Read10X(data.dir = "C:/Users/mad1188/Box/Sequencing Data/cellranger_count/ST3-BMP-7-1/filtered_feature_bc_matrix")
BMP2st3.data <-Read10X(data.dir = "C:/Users/mad1188/Box/Sequencing Data/cellranger_count/ST3-BMP-7-2/filtered_feature_bc_matrix")
BMP3st3.data <-Read10X(data.dir = "C:/Users/mad1188/Box/Sequencing Data/cellranger_count/ST3-BMP-7-3/filtered_feature_bc_matrix")


# Create Seurat objects ####
BMP1st3 <- CreateSeuratObject(counts = BMP1st3.data, 
                              project = "BMP1st3"
)
BMP2st3 <- CreateSeuratObject(counts = BMP2st3.data, 
                              project = "BMP2st3"
)
BMP3st3 <- CreateSeuratObject(counts = BMP3st3.data, 
                              project = "BMP3st3"
)



head(x = colnames(x = BMP1st3))
BMP1st3 <- RenameCells(object = BMP1st3, add.cell.id = "BMP1st3")
head(x = colnames(x = BMP1st3))
head(x = colnames(x = BMP2st3))
BMP7st3 <- RenameCells(object = BMP2st3, add.cell.id = "BMP2st3")
head(x = colnames(x = BMP2st3))
head(x = colnames(x = BMP3st3))
BMP3st3 <- RenameCells(object = BMP3st3, add.cell.id = "BMP3st3")
head(x = colnames(x = BMP3st3))

BMP1st3[["percent.mt"]] <- PercentageFeatureSet(object = BMP1st3, pattern = "^MT-")
BMP2st3[["percent.mt"]] <- PercentageFeatureSet(object = BMP2st3, pattern = "^MT-")
BMP3st3[["percent.mt"]] <- PercentageFeatureSet(object = BMP3st3, pattern = "^MT-")
p1 <- VlnPlot(object = BMP1st3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
p2 <- VlnPlot(object = BMP2st3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
p3 <- VlnPlot(object = BMP3st3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
CombinePlots(plots = list(p1, p2, p3), ncol =1)
p4 <- FeatureScatter(object = BMP1st3, feature1 = "nCount_RNA", feature2 = "percent.mt")
p5 <- FeatureScatter(object = BMP1st3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
p6 <- FeatureScatter(object = BMP2st3, feature1 = "nCount_RNA", feature2 = "percent.mt")
p7 <- FeatureScatter(object = BMP2st3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
p8 <- FeatureScatter(object = BMP3st3, feature1 = "nCount_RNA", feature2 = "percent.mt")
p9 <- FeatureScatter(object = BMP3st3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(p4, p5, p6, p7, p8, p9), ncol =2)


# Thresholding ####
# RNA based cell thresholding
# The operator can add columns to object metadata. This is a great place to stash QC stats
BMP1st3 <- subset(x = BMP1st3, subset = nFeature_RNA > 200 & nFeature_RNA < 8000 & percent.mt < 20)
BMP2st3 <- subset(x = BMP2st3, subset = nFeature_RNA > 200 & nFeature_RNA < 8000 & percent.mt < 20)
BMP3st3 <- subset(x = BMP3st3, subset = nFeature_RNA > 200 & nFeature_RNA < 8000 & percent.mt < 20)
p10 <- VlnPlot(object = BMP1st3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
p11 <- VlnPlot(object = BMP2st3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
p12 <- VlnPlot(object = BMP3st3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
CombinePlots(plots = list(p10, p11, p12), ncol =1)
p13 <- FeatureScatter(object = BMP1st3, feature1 = "nCount_RNA", feature2 = "percent.mt")
p14 <- FeatureScatter(object = BMP1st3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
p15 <- FeatureScatter(object = BMP2st3, feature1 = "nCount_RNA", feature2 = "percent.mt")
p16 <- FeatureScatter(object = BMP2st3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
p17 <- FeatureScatter(object = BMP3st3, feature1 = "nCount_RNA", feature2 = "percent.mt")
p18 <- FeatureScatter(object = BMP3st3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(p13, p14, p15, p16, p17, p18), ncol =2)




BMP7ST3 <- sample(x = c("BMP7ST3"), size = ncol(x = BMP1st3), replace = TRUE)
BMP1st3$groups <- BMP7ST3
head(x = BMP1st3[[]])

BMP7ST3 <- sample(x = c("BMP7ST3"), size = ncol(x = BMP2st3), replace = TRUE)
BMP2st3$groups <- BMP7ST3
head(x = BMP2st3[[]])

BMP7ST3 <- sample(x = c("BMP7ST3"), size = ncol(x = BMP3st3), replace = TRUE)
BMP3st3$groups <- BMP7ST3
head(x = BMP3st3[[]])


# Setup CONTROL-ST3(TimePoint 2) Seuratobject
#  Load 10X data ####
control1st3.data <-Read10X(data.dir = "C:/Users/mad1188/Box/Sequencing Data/cellranger_count/ST-3-CTRL-1/filtered_feature_bc_matrix")
control2st3.data <-Read10X(data.dir = "C:/Users/mad1188/Box/Sequencing Data/cellranger_count/ST-3-CTRL-2/filtered_feature_bc_matrix")
control3st3.data <-Read10X(data.dir = "C:/Users/mad1188/Box/Sequencing Data/cellranger_count/ST-3-CTRL-3/filtered_feature_bc_matrix")

# Create Seurat objects ####
control1st3 <- CreateSeuratObject(counts = control1st3.data, 
                                  project = "control1st3"
)
control2st3 <- CreateSeuratObject(counts = control2st3.data, 
                                  project = "control2st3"
)
control3st3 <- CreateSeuratObject(counts = control3st3.data, 
                                  project = "control3st3"
)

head(x = colnames(x = control1st3))
control1st3 <- RenameCells(object = control1st3, add.cell.id = "control1st3")
head(x = colnames(x = control1st3))
head(x = colnames(x = control2st3))
control2st3 <- RenameCells(object = control2st3, add.cell.id = "control2st3")
head(x = colnames(x = control2st3))
head(x = colnames(x = control3st3))
control3st3 <- RenameCells(object = control3st3, add.cell.id = "control3st3")
head(x = colnames(x = control3st3))
control1st3[["percent.mt"]] <- PercentageFeatureSet(object = control1st3, pattern = "^MT-")
control2st3[["percent.mt"]] <- PercentageFeatureSet(object = control2st3, pattern = "^MT-")
control3st3[["percent.mt"]] <- PercentageFeatureSet(object = control3st3, pattern = "^MT-")
p1 <- VlnPlot(object = control1st3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
p2 <- VlnPlot(object = control2st3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
p3 <- VlnPlot(object = control3st3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
CombinePlots(plots = list(p1, p2, p3), ncol =1)
p4 <- FeatureScatter(object = control1st3, feature1 = "nCount_RNA", feature2 = "percent.mt")
p5 <- FeatureScatter(object = control1st3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
p6 <- FeatureScatter(object = control2st3, feature1 = "nCount_RNA", feature2 = "percent.mt")
p7 <- FeatureScatter(object = control2st3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
p8 <- FeatureScatter(object = control3st3, feature1 = "nCount_RNA", feature2 = "percent.mt")
p9 <- FeatureScatter(object = control3st3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(p4, p5, p6, p7, p8, p9), ncol =2)


# Thresholding ####
# RNA based cell thresholding
# The operator can add columns to object metadata. This is a great place to stash QC stats

control1st3 <- subset(x = control1st3, subset = nFeature_RNA > 200 & nFeature_RNA < 8000 & percent.mt < 20)
control2st3 <- subset(x = control2st3, subset = nFeature_RNA > 200 & nFeature_RNA < 8000 & percent.mt < 20)
control3st3 <- subset(x = control3st3, subset = nFeature_RNA > 200 & nFeature_RNA < 8000 & percent.mt < 20)
p10 <- VlnPlot(object = control1st3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
p11 <- VlnPlot(object = control2st3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
p12 <- VlnPlot(object = control3st3, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
CombinePlots(plots = list(p10, p11, p12), ncol =1)
p13 <- FeatureScatter(object = control1st3, feature1 = "nCount_RNA", feature2 = "percent.mt")
p14 <- FeatureScatter(object = control1st3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
p15 <- FeatureScatter(object = control2st3, feature1 = "nCount_RNA", feature2 = "percent.mt")
p16 <- FeatureScatter(object = control2st3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
p17 <- FeatureScatter(object = control3st3, feature1 = "nCount_RNA", feature2 = "percent.mt")
p18 <- FeatureScatter(object = control3st3, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
CombinePlots(plots = list(p13, p14, p15, p16, p17, p18), ncol =2)

controlST3 <- sample(x = c("controlST3"), size = ncol(x = control1st3), replace = TRUE)
control1st3$groups <- controlST3
head(x = control1st3[[]])

controlST3 <- sample(x = c("controlST3"), size = ncol(x = control2st3), replace = TRUE)
control2st3$groups <- controlST3
head(x = control2st3[[]])

controlST3 <- sample(x = c("controlST3"), size = ncol(x = control3st3), replace = TRUE)
control3st3$groups <- controlST3
head(x = control3st3[[]])


# Merge Datasets
# Based on comment to Issue #4753 https://github.com/satijalab/seurat/issues/4753
# We use RPCA to yield conserved mapping

DiabetesST3<- c(control1st3, control2st3, control3st3,BMP1st3,BMP2st3,BMP3st3)

# normalize and identify variable features for each dataset independently
DiabetesST3.list <- lapply(X = DiabetesST3, FUN = function(x) {
  x <- NormalizeData(x)
  x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 3000)
})

# select features that are repeatedly variable across datasets for integration run PCA on each
# dataset using these features

features <- SelectIntegrationFeatures(object.list = DiabetesST3.list)
DiabetesST3.list <- lapply(X = DiabetesST3.list, FUN = function(x) {
  x <- ScaleData(x, features = features, verbose = FALSE)
  x <- RunPCA(x, features = features, verbose = FALSE)
})

# Perform integration
DiabetesST3.anchors <- FindIntegrationAnchors(object.list = DiabetesST3.list, anchor.features = features, reduction = "rpca")
DiabetesST3.combined <- IntegrateData(anchorset = DiabetesST3.anchors)

# Run the standard workflow for visualization and clustering
DefaultAssay(DiabetesST3.combined) <- "integrated"
DiabetesST3.combined <- ScaleData(DiabetesST3.combined, verbose = FALSE)
DiabetesST3.combined <- RunPCA(DiabetesST3.combined, npcs = 30, verbose = FALSE)
DiabetesST3.combined <- RunUMAP(DiabetesST3.combined, reduction = "pca", dims = 1:30)
DiabetesST3.combined <- FindNeighbors(DiabetesST3.combined, reduction = "pca", dims = 1:30)
DiabetesST3.combined <- FindClusters(DiabetesST3.combined, resolution = 0.4)

# Visualization
p3 <- DimPlot(DiabetesST3.combined, reduction = "umap", raster = FALSE)
p4 <- DimPlot(DiabetesST3.combined, reduction = "umap", label = TRUE,raster = FALSE,
              repel = TRUE)
p3 + p4

# Linear dimensionality assessment
DefaultAssay(object = DiabetesST3.combined)
DefaultAssay(object = DiabetesST3.combined) <- "integrated"
DiabetesST3.combined <- RunPCA(object = DiabetesST3.combined, features = VariableFeatures(object = DiabetesST3.combined))
print(x = DiabetesST3.combined[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(object = DiabetesST3.combined, dims = 1:2, reduction = "pca")
DimPlot(object = DiabetesST3.combined, reduction = "pca")
DimHeatmap(object = DiabetesST3.combined, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(object = DiabetesST3.combined, dims = 1:15, cells = 500, balanced = TRUE)
ElbowPlot(object = DiabetesST3.combined)

#CLUSTER ANALYSIS ####
# Clustering, we run multiple permutations to allow clustree to analyze optimal clustering resolution.
DiabetesST3.combined <- FindNeighbors(object = DiabetesST3.combined, dims = 1:20)
DiabetesST3.combined <- FindClusters(object = DiabetesST3.combined, resolution = 0)
DiabetesST3.combined <- FindClusters(object = DiabetesST3.combined, resolution = 0.1)
DiabetesST3.combined <- FindClusters(object = DiabetesST3.combined, resolution = 0.2)
DiabetesST3.combined <- FindClusters(object = DiabetesST3.combined, resolution = 0.3)
DiabetesST3.combined <- FindClusters(object = DiabetesST3.combined, resolution = 0.4)
DiabetesST3.combined <- FindClusters(object = DiabetesST3.combined, resolution = 0.5)
DiabetesST3.combined <- FindClusters(object = DiabetesST3.combined, resolution = 0.6)

# Cluster-tree analysis, looking appropriate non-anomalous clustering resolution
clustree(DiabetesST3.combined, prefix = "integrated_snn_res.")
DiabetesST3.combined <- FindClusters(object = DiabetesST3.combined, resolution = 0.4)
table(DiabetesST3.combined$CellType,DiabetesST3.combined$groups)
table(DiabetesST3.combined$seurat_clusters)
table(Idents(DiabetesST3.combined), DiabetesST3.combined$orig.ident)

# DATA-VISUALIZATION ####
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DiabetesST3.combined <- RunUMAP(DiabetesST3.combined, dims = 1:30)
p1010 <- DimPlot(object = DiabetesST3.combined, group.by = c("groups", "integrated_snn_res.0.4"), combine = FALSE, pt.size = 1, raster = FALSE, label = TRUE)
p1010 <- lapply(X = p1010, FUN = function(x) x + theme(legend.position = "top") + guides(color = guide_legend(nrow = 3, byrow = TRUE, override.aes = list(size = 3))))
CombinePlots(p1010)

DiabetesST3.combined <- RenameIdents(DiabetesST3.combined, `0` = "A5", `1` = "A3", `2` = "A3", `3` = "D1", `4` = "D3", `5` = "A7", `6` = "A2", `7` = "D3", `8` = "A9", `9` = "A1",`10` = "A1", `11` = "S", `12` = "M", `13` = "D2", `14` = "D4", `15` = "E", `16` = "I", `17` = "DX")
DimPlot(DiabetesST3.combined, label = TRUE, raster = FALSE)
DimPlot(DiabetesST3.combined, label = FALSE, raster = FALSE)

DimPlot(DiabetesST3.combined, reduction = "umap", 
        cols =  c("yellow",
                  "yellow3",
                  "turquoise1",
                  "royalblue1",
                  "gold3",
                  "sienna3",
                  "salmon3",
                  "lightgoldenrod2",
                  "grey",
                  "pink",
                  "mediumseagreen",
                  "lightslateblue",
                  "palegreen2",
                  "red",
                  "mediumslateblue"),
        pt.size = 1, raster = FALSE, label = TRUE)  



#Renaming the clusters

DiabetesST3.combined <- RenameIdents(DiabetesST3.combined, `0` = "Acinar1", `1` = "Acinar2", `2` = "Ductal1_SPP1", `3` = "Acinar3_OLFM4", `4` = "Ductal2", `5` = "Acinar+Ductal", `6` = "Acinar4", `7` = "Ductal3", `8` = "Acinar5", `9` = "Acinar6",`10` = "Acinar7", `11` = "Stellate", `12` = "Ductal4", `13` = "Macrophage", `14` = "Ductal5_TFF1", `15` = "Islets", `16` = "Ductal6", `17` = "Endothelial cells", `18` = "Progenitor-like cells_SPP1")
DimPlot(DiabetesST3.combined, label = TRUE, raster = FALSE)
DimPlot(DiabetesST3.combined, label = FALSE, raster = FALSE)

DimPlot(DiabetesST3.combined, reduction = "umap", 
        cols =  c("yellow3",
                  "sandybrown",
                  "royalblue1",
                  "darkgoldenrod2",
                  "turquoise1",
                  "greenyellow",
                  "lightgoldenrod2",
                  "lightblue1",
                  "sienna3",
                  "darkgoldenrod4",
                  "darkgoldenrod3",
                  "grey",
                  "navyblue",
                  "pink", 
                  "mediumseagreen","red","lightcyan4","palegreen2", "deepskyblue1"
        ),
        pt.size = 1, raster = FALSE, label = TRUE,  split.by = "groups")  


DiabetesST3.combined <- RenameIdents(DiabetesST3.combined, `0` = "Acinar1", `1` = "Acinar2", `2` = "Ductal1_SPP1", `3` = "Acinar3_OLFM4", `4` = "Ductal2", `5` = "Acinar+Ductal", `6` = "Acinar4", `7` = "Ductal3", `8` = "Acinar5", `9` = "Acinar6",`10` = "Acinar7", `11` = "Stellate", `12` = "Ductal4", `13` = "Macrophage", `14` = "Ductal5_TFF1", `15` = "Islets", `16` = "Ductal6", `17` = "Endothelial cells", `18` = "Progenitor-like cells_SPP1")
DimPlot(DiabetesST3.combined, label = TRUE, raster = FALSE)
DimPlot(DiabetesST3.combined, label = FALSE, raster = FALSE)

DimPlot(DiabetesST3.combined, reduction = "umap", 
        cols =  c("yellow3",
                  "sandybrown",
                  "royalblue1",
                  "darkgoldenrod2",
                  "turquoise1",
                  "greenyellow",
                  "lightgoldenrod2",
                  "lightblue1",
                  "sienna3",
                  "darkgoldenrod4",
                  "darkgoldenrod3",
                  "grey",
                  "navyblue",
                  "pink", 
                  "mediumseagreen","red","lightcyan4","palegreen2", "deepskyblue1"
        ),
        pt.size = 1, raster = FALSE, label = FALSE)  

table(DiabetesST3.combined$CellType, DiabetesST3.combined$orig.ident)

head(x = DiabetesST3.combined[[]])

View(DiabetesST3.combined@meta.data)

Idents(DiabetesST3.combined)

head(Idents(DiabetesST3.combined), 5)

DiabetesST3.combined$CellType <- Idents(DiabetesST3.combined)

head(x = DiabetesST3.combined[[]])
write.csv(DiabetesST3.combined@meta.data, file='metadata2.csv', quote=T, row.names=T)

saveRDS(DiabetesST3.combined, file = "C:/Users/mad1188/Box/Mayur_shared_JDB/JUAN ONLY-DO NOT TOUCH/Mayur last/Materials and Methods/CONTROL+BMP7_TimePoint_2.rds")

